@using AuditStorageSystem.Framework
@model AuditStorageSystem.Models.Audit

@{
    ViewBag.Title = "Edit";
}

<h2>Edit Audits</h2>

@using (Html.BeginForm("Edit", "Audits", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.AuditId)

        <div class="form-group">
            @Html.LabelFor(model => model.ProjectId, "ProjectId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ProjectId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ServiceType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.ServiceType, "Select Service Type", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ServiceType, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastAuditDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.LastAuditDate, new { @class = "form-control datepicker", @autocomplete = "off", @disabled = "disabled"})
                @Html.ValidationMessageFor(model => model.LastAuditDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PlannedDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PlannedDate, new
           {
               htmlAttributes = new
               {
                   @class = "form-control datepicker",
                   @autocomplete = "off",
               }
           })
                @Html.ValidationMessageFor(model => model.PlannedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Status, "Select Status", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Status, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Auditors, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Auditors, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Auditors, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Result, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Result, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Result, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.Goal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Goal, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Goal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model.Files.Any())
        {
            <div class="form-group">
                <span class="control-label col-md-2"><strong>Attachments</strong></span>
                <div class="col-md-10">

                    @foreach (var file in Model.Files)
                    {
                        <a href="~/File/Download?id=@file.FileId" target="_blank">@file.FileName</a>
                        <br>
                    }
                </div>
            </div>
        }

        <div class="form-group">
            @Html.Label("Add attachment", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div id="fileInputFields">
                    <input type="file" name="uploads" /><br>
                </div>
                <input type="button" class="btn btn-default" id="fileInputBtn" value='Add Upload Field' onclick="addInputField('fileInputFields', 'file', 'uploads')" />
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
